{
  "function component": {
    "name": "function component",
    "prefix": "fc",
    "body": [
      "import { FC, memo } from 'react';",
      "",
      "interface OwnProps {}",
      "",
      "type Props = OwnProps;",
      "",
      "const ${TM_FILENAME_BASE}: FC<Props> = (props) => {",
      "",
      "  return ();",
      "};",
      "",
      "export default memo(${TM_FILENAME_BASE});"
    ]
  },
  "useState": {
    "name": "useState",
    "prefix": "us",
    "body": [
      "const [$1, $2] = useState($0);"
    ]
  },
  "useRef": {
    "name": "useRef",
    "prefix": "ur",
    "body": [
      "const $1 = useRef<$2>($0);"
    ]
  },
  "useForm": {
    "name": "useForm",
    "prefix": "uf",
    "body": [
      "const [form] = Form.useForm();"
    ]
  },
  "useEffect": {
    "name": "useEffect",
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "  $0",
      "}, []);"
    ]
  },
  "useContext": {
    "name": "useContext",
    "prefix": "uctx",
    "body": [
      "const { $0 } = useContext($1);"
    ]
  },
  "useCallback": {
    "name": "useCallback",
    "prefix": "ucb",
    "body": [
      "const $1 = useCallback(() => {",
      "  $0",
      "}, []);"
    ]
  },
  "import scss": {
    "name": "import scss",
    "prefix": "icss",
    "body": [
      "import styles from './${TM_FILENAME_BASE}.scss"
    ]
  },
  "import scss module": {
    "name": "import scss module",
    "prefix": "icssm",
    "body": [
      "import styles from './${TM_FILENAME_BASE}.module.scss"
    ]
  },
  "extra variable": {
    "name": "extra variable",
    "prefix": "cv",
    "body": [
      "const { $0 } = $1;"
    ]
  },
  "create redux model": {
    "name": "create redux model",
    "prefix": "model",
    "body": [
      "import { Model } from '@redux-model/react';",
      "",
      "type Data = {};",
      "",
      "class ${TM_FILENAME_BASE} extends Model<Data> {",
      "  $0",
      "",
      "  protected initialState(): Data {",
      "    return {};",
      "  }",
      "}",
      "",
      "export const ${TM_FILENAME_BASE/^([_A-Z])/${1:/downcase}/} = new ${TM_FILENAME_BASE}();"
    ]
  }
}
