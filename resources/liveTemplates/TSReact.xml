<templateSet group="TSReact">
  <template name="cms" value="const mapStateToProps = (state: RootState) =&gt; {&#10;  return {&#10;    $END$&#10;  };&#10;};" description="mapStateToProps" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cmd" value="const mapDispatchToProps = {&#10;  $END$&#10;};" description="mapDispatchToProps" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rcc" value="import React, { PureComponent } from 'react';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps;&#10;&#10;class $FILE_NAME$ extends PureComponent&lt;Props&gt; {&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $END$&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default $FILE_NAME$;&#10;" description="react component" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rccs" value="import React, { PureComponent } from 'react';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps;&#10;&#10;type State = Readonly&lt;{&#10;  $STATE$&#10;}&gt;;&#10;&#10;class $FILE_NAME$ extends PureComponent&lt;Props, State&gt; {&#10;  readonly state: State = {&#10;    $STATE$&#10;  };&#10;  &#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $FILE_NAME$&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default $FILE_NAME$;&#10;" description="react component with state" toReformat="false" toShortenFQNames="true">
    <variable name="STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cs" value="const { $END$ } = this.state;" description="state" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cp" value="const { $END$ } = this.props;" description="props" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="toms" value="ReturnType&lt;typeof mapStateToProps&gt;" description="ReturnType&lt;typeof mapStateToProps&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tomd" value="typeof mapDispatchToProps" description="typeof mapDispatchToProps" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ss" value="this.setState({&#10;  $END$&#10;});" description="this.setState()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="icss" value="import styles from './$FILE_NAME$.scss';" description="import styles" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rrc" value="import React, { PureComponent } from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps &amp; ReturnType&lt;typeof mapStateToProps&gt; &amp; typeof mapDispatchToProps;&#10;&#10;class $FILE_NAME$ extends PureComponent&lt;Props&gt; {&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $END$&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}&#10;&#10;const mapStateToProps = (state: RootState) =&gt; {&#10;  return {&#10;&#10;  };&#10;};&#10;&#10;const mapDispatchToProps = {&#10;&#10;};&#10;&#10;export default connect(mapStateToProps, mapDispatchToProps)($FILE_NAME$);&#10;" description="react component with react-redux" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rrcs" value="import React, { PureComponent } from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps &amp; ReturnType&lt;typeof mapStateToProps&gt; &amp; typeof mapDispatchToProps;&#10;&#10;type State = Readonly&lt;{}&gt;;&#10;&#10;class $FILE_NAME$ extends PureComponent&lt;Props, State&gt; {&#10;  readonly state: State = {};&#10;&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $END$&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;}&#10;&#10;const mapStateToProps = (state: RootState) =&gt; {&#10;  return {&#10;&#10;  };&#10;};&#10;&#10;const mapDispatchToProps = {&#10;&#10;};&#10;&#10;export default connect(mapStateToProps, mapDispatchToProps)($FILE_NAME$);&#10;" description="react component with react-redux and state" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tps" value="type State = Readonly&lt;{$END$}&gt;;&#10;" description="type State" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mar" value="interface Response {}&#10;&#10;type Data = Response;&#10;&#10;class $FILE_NAME$ extends $MODEL_NAME$&lt;Data, Response&gt; {&#10;  action(): RM.MiddlewareEffect&lt;Response&gt; {&#10;    return this.get('');&#10;  }&#10;&#10;  protected getInitValue(): Data {&#10;    return {};&#10;  }&#10;&#10;  protected onSuccess(_: Data, action: RM.ResponseAction&lt;Response&gt;): Data {&#10;    return action.response;&#10;  }&#10;}&#10;&#10;export const $_FILE_NAME$ = new $FILE_NAME$();" description="model action reducer" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="MODEL_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="_FILE_NAME" expression="camelCase(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ma" value="&#10;class $FILE_NAME$ extends $MODEL_NAME$ {&#10;  action(): RM.MiddlewareEffect {&#10;    return this.post('');&#10;  }&#10;}&#10;&#10;export const $_FILE_NAME$ = new $FILE_NAME$();" description="model action" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="MODEL_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="_FILE_NAME" expression="camelCase(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fc" value="import React, { FunctionComponent } from 'react';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps;&#10;&#10;const $FILE_NAME$: FunctionComponent&lt;Props&gt; = (props) =&gt; {&#10;  return &lt;div&gt;$END$&lt;/div&gt;;&#10;};&#10;&#10;export default $FILE_NAME$;&#10;" description="function component" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="frc" value="import React, { FunctionComponent } from 'react';&#10;import { connect } from 'react-redux';&#10;&#10;interface OwnProps {}&#10;&#10;type Props = OwnProps &amp; ReturnType&lt;typeof mapStateToProps&gt;;&#10;&#10;const $FILE_NAME$: FunctionComponent&lt;Props&gt; = (props) =&gt; {&#10;  return &lt;div&gt;$END$&lt;/div&gt;;&#10;};&#10;&#10;const mapStateToProps = (state: RootState) =&gt; {&#10;  return {&#10;    $END$&#10;  };&#10;};&#10;&#10;export default connect(mapStateToProps)($FILE_NAME$);&#10;" description="function component with react-redux" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>